// <auto-generated />
using System;
using Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Api.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250411153450_update")]
    partial class update
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("shop")
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Api.Domain.Entities.Customer", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("create_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("customer_name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("update_at")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("id");

                    b.ToTable("customers", "shop");
                });

            modelBuilder.Entity("Api.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("create_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("image")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("price")
                        .HasColumnType("numeric");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("update_at")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("id");

                    b.ToTable("products", "shop");
                });

            modelBuilder.Entity("Api.Domain.Entities.Sale", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("branch_id")
                        .HasColumnType("uuid");

                    b.Property<bool>("cancelled")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("create_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("customer_id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("sale_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("sale_number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("total_amount")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("update_at")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("id");

                    b.ToTable("sales", "shop");
                });

            modelBuilder.Entity("Api.Domain.Entities.SaleItem", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("create_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("discount")
                        .HasColumnType("numeric");

                    b.Property<bool>("is_cancelled")
                        .HasColumnType("boolean");

                    b.Property<Guid>("product_id")
                        .HasColumnType("uuid");

                    b.Property<int>("quantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("sale_id")
                        .HasColumnType("uuid");

                    b.Property<decimal>("total")
                        .HasColumnType("numeric");

                    b.Property<decimal>("unit_price")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("update_at")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("id");

                    b.HasIndex("product_id");

                    b.HasIndex("sale_id");

                    b.ToTable("sales_items", "shop");
                });

            modelBuilder.Entity("Api.Domain.Entities.SaleItem", b =>
                {
                    b.HasOne("Api.Domain.Entities.Product", "product")
                        .WithMany("sale_items")
                        .HasForeignKey("product_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Domain.Entities.Sale", "sale")
                        .WithMany("items")
                        .HasForeignKey("sale_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("product");

                    b.Navigation("sale");
                });

            modelBuilder.Entity("Api.Domain.Entities.Product", b =>
                {
                    b.Navigation("sale_items");
                });

            modelBuilder.Entity("Api.Domain.Entities.Sale", b =>
                {
                    b.Navigation("items");
                });
#pragma warning restore 612, 618
        }
    }
}
